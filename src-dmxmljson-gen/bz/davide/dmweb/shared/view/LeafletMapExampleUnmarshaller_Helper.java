/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package bz.davide.dmweb.shared.view;


public class LeafletMapExampleUnmarshaller_Helper extends bz.davide.dmxmljson.unmarshalling.Unmarshaller
{
   protected LeafletMapExampleUnmarshaller_Helper()
   {
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.DMWidgetSerializationData", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.DMWidgetSerializationData>() {
         @Override public void check(bz.davide.dmweb.shared.view.DMWidgetSerializationData  ret){
            // attachHandlers
            if (ret.attachHandlers != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.DMWidgetSerializationData.attachHandlers");
            // domReady
            if (ret.domReady != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.DMWidgetSerializationData.domReady");
            // idseq
            if (ret.idseq != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.DMWidgetSerializationData.idseq");
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.DMWidgetSerializationData", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.dmweb.shared.view.DMWidgetSerializationData ret = new bz.davide.dmweb.shared.view.DMWidgetSerializationData();
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.DMWidgetSerializationData").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.DMWidgetSerializationData", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // attachHandlers
            if ((value = structure.property("attachHandlers")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.DMWidgetSerializationData)obj).attachHandlers = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  java.util.ArrayList arrayList = new java.util.ArrayList(arr.length());       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("AttachListener"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((bz.davide.dmweb.shared.view.DMWidgetSerializationData)obj).attachHandlers = arrayList;
               }
            // domReady
            if ((value = structure.property("domReady")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.DMWidgetSerializationData)obj).domReady = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  java.util.ArrayList arrayList = new java.util.ArrayList(arr.length());       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("AttachListener"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((bz.davide.dmweb.shared.view.DMWidgetSerializationData)obj).domReady = arrayList;
               }
            // idseq
            if ((value = structure.property("idseq")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.dmweb.shared.view.DMWidgetSerializationData)obj).idseq = (int)value.integer();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.LeafletMapAttachListener", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.LeafletMapAttachListener>() {
         @Override public void check(bz.davide.dmweb.shared.view.LeafletMapAttachListener  ret){
            // mapWidget
            if (ret.mapWidget != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.LeafletMapAttachListener.mapWidget");
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.LeafletMapAttachListener", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.dmweb.shared.view.LeafletMapAttachListener ret = new bz.davide.dmweb.shared.view.LeafletMapAttachListener();
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.LeafletMapAttachListener").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.LeafletMapAttachListener", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // mapWidget
            if ((value = structure.property("mapWidget")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.LeafletMapAttachListener)obj).mapWidget = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((bz.davide.dmweb.shared.view.LeafletMapAttachListener)obj).mapWidget = (bz.davide.dmweb.shared.view.LeafletMapView)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("LeafletMapView"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((bz.davide.dmweb.shared.view.LeafletMapAttachListener)obj).mapWidget = (bz.davide.dmweb.shared.view.LeafletMapView)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.DivView$InitParameters", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.DivView.InitParameters>() {
         @Override public void check(bz.davide.dmweb.shared.view.DivView.InitParameters  ret){
            // styleName
            if (ret.styleName != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.DivView$InitParameters.styleName");
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.AbstractHtmlElementView$InitParameters").check(ret);
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.DivView$InitParameters", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.dmweb.shared.view.DivView.InitParameters ret = new bz.davide.dmweb.shared.view.DivView.InitParameters();
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.DivView$InitParameters").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.DivView$InitParameters", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.view.AbstractHtmlElementView$InitParameters", obj, identities);
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // styleName
            if ((value = structure.property("styleName")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.DivView.InitParameters)obj).styleName = null;
               else
               {
                  ((bz.davide.dmweb.shared.view.DivView.InitParameters)obj).styleName = value.string();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.LeafletMapView$InitParameters", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.LeafletMapView.InitParameters>() {
         @Override public void check(bz.davide.dmweb.shared.view.LeafletMapView.InitParameters  ret){
            // height
            if (ret.height != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.LeafletMapView$InitParameters.height");
            // initialLat
            if (ret.initialLat != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.LeafletMapView$InitParameters.initialLat");
            // initialLon
            if (ret.initialLon != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.LeafletMapView$InitParameters.initialLon");
            // initialZoom
            if (ret.initialZoom != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.LeafletMapView$InitParameters.initialZoom");
            // width
            if (ret.width != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.LeafletMapView$InitParameters.width");
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.DivView$InitParameters").check(ret);
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.LeafletMapView$InitParameters", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.dmweb.shared.view.LeafletMapView.InitParameters ret = new bz.davide.dmweb.shared.view.LeafletMapView.InitParameters();
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.LeafletMapView$InitParameters").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.LeafletMapView$InitParameters", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.view.DivView$InitParameters", obj, identities);
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // height
            if ((value = structure.property("height")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.dmweb.shared.view.LeafletMapView.InitParameters)obj).height = (int)value.integer();
               }
            // initialLat
            if ((value = structure.property("initialLat")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.dmweb.shared.view.LeafletMapView.InitParameters)obj).initialLat = value.decimal();
               }
            // initialLon
            if ((value = structure.property("initialLon")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.dmweb.shared.view.LeafletMapView.InitParameters)obj).initialLon = value.decimal();
               }
            // initialZoom
            if ((value = structure.property("initialZoom")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.dmweb.shared.view.LeafletMapView.InitParameters)obj).initialZoom = (int)value.integer();
               }
            // width
            if ((value = structure.property("width")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.dmweb.shared.view.LeafletMapView.InitParameters)obj).width = (int)value.integer();
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.DivView", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.DivView>() {
         @Override public void check(bz.davide.dmweb.shared.view.DivView  ret){
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.AbstractHtmlElementView").check(ret);
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.DivView", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.dmweb.shared.view.DivView ret = new bz.davide.dmweb.shared.view.DivView();
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.DivView").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.DivView", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.view.AbstractHtmlElementView", obj, identities);
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.LeafletMapView", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.LeafletMapView>() {
         @Override public void check(bz.davide.dmweb.shared.view.LeafletMapView  ret){
            // initParameters
            if (ret.initParameters != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.LeafletMapView.initParameters");
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.DivView").check(ret);
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.LeafletMapView", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            bz.davide.dmweb.shared.view.LeafletMapView ret = new bz.davide.dmweb.shared.view.LeafletMapView();
            emptyObjectCheck.get("bz.davide.dmweb.shared.view.LeafletMapView").check(ret);
            return ret;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.LeafletMapView", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.view.DivView", obj, identities);
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // initParameters
            if ((value = structure.property("initParameters")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.LeafletMapView)obj).initParameters = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((bz.davide.dmweb.shared.view.LeafletMapView)obj).initParameters = (bz.davide.dmweb.shared.view.LeafletMapView.InitParameters)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("LeafletMapView$InitParameters"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((bz.davide.dmweb.shared.view.LeafletMapView)obj).initParameters = (bz.davide.dmweb.shared.view.LeafletMapView.InitParameters)o;
                  }
               }
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.AbstractHtmlElementView$InitParameters", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.AbstractHtmlElementView.InitParameters>() {
         @Override public void check(bz.davide.dmweb.shared.view.AbstractHtmlElementView.InitParameters  ret){
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.AbstractHtmlElementView$InitParameters", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return null;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.AbstractHtmlElementView$InitParameters", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            structure.close();
         }
      });
      this.emptyObjectCheck.put("bz.davide.dmweb.shared.view.AbstractHtmlElementView", new bz.davide.dmxmljson.unmarshalling.EmptyFieldChecker<bz.davide.dmweb.shared.view.AbstractHtmlElementView>() {
         @Override public void check(bz.davide.dmweb.shared.view.AbstractHtmlElementView  ret){
            // attachHandlers
            if (ret.attachHandlers != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.AbstractHtmlElementView.attachHandlers");
            // childs
            if (ret.childs != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.AbstractHtmlElementView.childs");
            // clickHandlers
            if (ret.clickHandlers != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.AbstractHtmlElementView.clickHandlers");
            // eventBits
            if (ret.eventBits != 0)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.AbstractHtmlElementView.eventBits");
            // id
            if (ret.id != null)
               throw new RuntimeException("The constructor initialized the field bz.davide.dmweb.shared.view.AbstractHtmlElementView.id");
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.view.AbstractHtmlElementView", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return null;
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.view.AbstractHtmlElementView", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            structure.open();
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // attachHandlers
            if ((value = structure.property("attachHandlers")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).attachHandlers = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  java.util.ArrayList arrayList = new java.util.ArrayList(arr.length());       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("AttachListener"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).attachHandlers = arrayList;
               }
            // childs
            if ((value = structure.property("childs")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).childs = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  java.util.ArrayList arrayList = new java.util.ArrayList(arr.length());       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("Node"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).childs = arrayList;
               }
            // clickHandlers
            if ((value = structure.property("clickHandlers")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).clickHandlers = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  arr.open();        
                  java.util.ArrayList arrayList = new java.util.ArrayList(arr.length());       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        bz.davide.dmxmljson.unmarshalling.Structure tmpStructure = value.structure();
                        String refid = tmpStructure.getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(tmpStructure.getRuntimeClassName("DMClickHandler"));              
                           internalUnmarschall(tmpStructure, o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  arr.close();        
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).clickHandlers = arrayList;
               }
            // eventBits
            if ((value = structure.property("eventBits")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).eventBits = (int)value.integer();
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).id = null;
               else
               {
                  ((bz.davide.dmweb.shared.view.AbstractHtmlElementView)obj).id = value.string();
               }
            structure.close();
         }
      });

   }
}
