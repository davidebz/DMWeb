/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package bz.davide.dmweb.shared.model;


public class Html5Unmarshaller_Helper extends bz.davide.dmxmljson.unmarshalling.Unmarshaller
{
   protected Html5Unmarshaller_Helper()
   {
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Html", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Html((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Html", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // body
            if ((value = structure.property("body")) != null)
               if (value.isNull())
                  ((Html)obj).body = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Html)obj).body = (bz.davide.dmweb.shared.model.Body)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Body"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Html)obj).body = (bz.davide.dmweb.shared.model.Body)o;
                  }
               }
            // head
            if ((value = structure.property("head")) != null)
               if (value.isNull())
                  ((Html)obj).head = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Html)obj).head = (bz.davide.dmweb.shared.model.Head)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Head"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Html)obj).head = (bz.davide.dmweb.shared.model.Head)o;
                  }
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Meta", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Meta((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Meta", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Link", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Link((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Link", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Title", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Title((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Title", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Script", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Script((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Script", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Section", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Section((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Section", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Ul", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Ul((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Ul", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Li", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Li((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Li", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.H2", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.H2((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.H2", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Iframe", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Iframe((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Iframe", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Div", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Div((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Div", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.B", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.B((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.B", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.A", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.A((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.A", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.TextNode", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.TextNode((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.TextNode", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // value
            if ((value = structure.property("value")) != null)
               if (value.isNull())
                  ((TextNode)obj).value = null;
               else
               {
                  ((TextNode)obj).value = value.string();
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Br", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Br((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Br", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Strong", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Strong((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Strong", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Img", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Img((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Img", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // src
            if ((value = structure.property("src")) != null)
               if (value.isNull())
                  ((Img)obj).src = null;
               else
               {
                  ((Img)obj).src = value.string();
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Pre", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Pre((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Pre", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Code", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Code((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Code", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.AbstractHtmlElement", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.AbstractHtmlElement((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.AbstractHtmlElement", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // childNodes
            if ((value = structure.property("childNodes")) != null)
               if (value.isNull())
                  ((AbstractHtmlElement)obj).childNodes = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("Node"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((AbstractHtmlElement)obj).childNodes = arrayList;
               }
            // tagName
            if ((value = structure.property("tagName")) != null)
               if (value.isNull())
                  ((AbstractHtmlElement)obj).tagName = null;
               else
               {
                  ((AbstractHtmlElement)obj).tagName = value.string();
               }
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Body", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Body((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Body", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
         }
      });
      this.putInstanceFactory("bz.davide.dmweb.shared.model.Head", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new bz.davide.dmweb.shared.model.Head((Void)null);
         }
      });

      this.putClassUnmarshaller("bz.davide.dmweb.shared.model.Head", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            internalUnmarschall(structure, "bz.davide.dmweb.shared.model.AbstractHtmlElement", obj, identities);
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // title
            if ((value = structure.property("title")) != null)
               if (value.isNull())
                  ((Head)obj).title = null;
               else
               {
                  ((Head)obj).title = value.string();
               }
         }
      });

   }
}
